?c
z
c(z,555,z)
*2 + 100
* 2 + 100
* Z + 100
z <- * 2 + 100
z * 2 + 100
my_sqrt <- sqrt(Z-1)
z
info()
play()
m <- c(40)
j <- sqrt(c)
j <- sqrt(m)
j
m <- c(40,2)
j <- sqrt(m)
j
j <- sqrt(m-1)
j
nxt()
z
mq_sqrt <- sqrt(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
testdir <- dir.create()
dir.create(testdir)
play()
m <- getwd()
m
nxt()
dir.create(C:/Users/Vamsi/Documents/testdir)
dir.create(C:\Users\Vamsi\Documents\testdir)
dir.create("C:/Users/Vamsi/Documents/testdir")
dir.create("testdir")
setwd(testdir)
setwd("testdir')
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path(C:/Users/Vamsi/Documents/testdir/mytest3.R)
file.path(mytest3.R)
file.path("mytest3.R')
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create()
?dir.create
file.path(dir.create("testdir2,"testdir3",recursive = TRUE))
file.path(dir.create("testdir2,"testdir3",recursive = TRUE)))
file.path(dir.create("testdir2","testdir3",recursive = TRUE)))
file.path(dir.create("testdir2","testdir3",recursive = TRUE))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("test.dir",recursive = TRUE)
unlink("test.dir", recursive = TRUE)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0, 10, by=0.5)
seq(5,10, length=30)
my-seq <- v
my-seq <- seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), time = 10)
rep(c(0,1,2), times = 10)
rep(c(0,1,2),each = 10)
num_vect <- c(0.5,55,-10,6)
s <- num_vect < 1
tf <- num_vect < 1
tf
num-vect >= 6
num_vect >= 6
my_char <- ("My", "name","is")
my_char <- ("My","name","is")
my_char <- c("My","name","is")
my-char
my_char
paste(my_char, collapse = " ")
c(my_char," Venkat")
paste(my_char,"venkat")
my_name <- c(my_char, "Venkat")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, "X","Y","Z", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "_")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x *3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data = NA
my_data == NA
sum(my_na)
my-data
my_data
0/0
Inf -1
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x.0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3,5,7])
x[3,5,7]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(vect)
vect <- c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
`attributes<-`(my_vector)
`attributes<-(my_vector)
`attributes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my-vector
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(data = 1:20, nrow=4,ncol = 5)
identical(my_matrix,my_matrix2)
patients <-("Bill","Gina","Kelly","Sean")
patients <-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cname <- c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 !=7
!5=7
! 5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
istrue(6>4)
isTRUE(6>4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(int > 7)
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
submit()
boring_function('My first function!')
boring_function()
boring_function
sumbit()
submit()
my_mean(4,5,10)
my_mean(c(4,5,10)
my_mean(c(4,5,10))
sumbit()
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
submit()
play()
nxt()
sumbit()
submit()
submit()
submit()
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){ x[length(x)] }, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("good","bad")
submit()
mad_libs(delhi,beautiful,person)
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list)
?sapply
sapply(cls_list,class(cls_list),simplify = TRUE)
cls_vect <- sapply(flags, class
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum
)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
sapply(flag_shapes,range)
lapply(flag_shapes,range)
shape-mat <- sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,lenght)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
Use tapply(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plans,10)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),size = 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean =100, sd =25)
?rpois
rpois(5)
rpois(5,mean() )
rpois(5,mean = 10 )
rpois(5,lambda = 10 )
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date()
d2 <- as.Date('1969-01-01')
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <-  "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist).
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main ="My Plot")
plot(cars, subtitle = " My plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col =2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcard$mpg)
hist(mtcars$mpg)
getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome
dim(outcome)
str(outcome)
class(outcome)
sapply(outcome,class)
head(outcome)
nrow(outcome)
ncol(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outk <- read.csv("outcome-of-care-measures.csv")
outk[7]
? validObject
unique(outk[7])
k <- unique(outk[7])
class(k)
source(best.R)
source("best.R')
source("best.R")
getwd()
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
class(k)
source("best.R")
best("TX", "heart attack")
k <- as.character(unique(outk[7]))
k
k <- unique(outk[7])
k
k <- unique(outk[,7])
k
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
m <- min(as.numeric(outk[23]),na.rm = TRUE)
min(as.numeric(outk[23]),na.rm = TRUE)
sapply(outk[11],min,na.rm = TRUE)
sapply(outk[11],min(),na.rm = TRUE)
sub_set <- outk[,7] == state
sub_set <- outk[,7] == TX
sub_set <- outk[,7] == "TX"
sub_set
outk(sub_set)
outk[sub_set]
outk[sub_set,]
outk[,sub_set]
sub_set <- out1[out1[,7] == "TX"]
sub_set <- outk[outk[,7] == "TX"]
sub_set <- outk[outk[,7] == "TX", ]
sub-set
sub_set
class(sub_set)
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart attack")
mink <- min(as.numeric(outk[,23]),na.rm = TRUE)
mink
mink <- min(as.numeric(outk[,11]),na.rm = TRUE)
mink
list.files
list.files()
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
source(rankhospital.R)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
